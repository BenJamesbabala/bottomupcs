<chapter id="wk8">
  
  <title>Libraries and Dynamic Linking</title>

  <sect1>
    <title>Libraries</title>

    <para>Developers soon tired of having to write everything
      themselves from scratch, so one of the first inventions of
      computer science was <emphasis>libraries</emphasis>.</para>

    <para>A library is simply a collection of functions which you
      can call from your program.  Obviously a library has many
      advantages, not least of which is that you can save much time by
      reusing work someone else has already done and generally be more
      confident that it has fewer bugs (since probably many other
      people use the libraries too, and you benefit from having them
      finding and fixing bugs).  A library is exactly like an
      executable, except instead of running directly the library
      functions are invoked with parameters from your
      executable.</para>

  </sect1>

  <sect1>
    
    <title>Static Libraries</title>
	
    <para>When a library is linked right in to your executable, it's
      called a <emphasis>static</emphasis> library.  This has two main
      disadvantages; firstly if the library code is updated (to fix a
      bug, say) you have to recompile your program into a new
      exectuable and secondly every program in the system that uses
      that library contains a copy in it's executable, which is very
      inefficient (and a pain if you find a bug and have to recompile,
      as per point one).</para>

    <para>In fact, a static library is simply a group of object
	files in an <emphasis>archive</emphasis>.  This is a very
	simple format similar to a <command>zip</command> file.</para>

    <para>You can create archive files with the
	<command>ar</command> command (in fact, you can put any type
	of file in an <command>ar</command> archive, but generally it
	is only used with object files).  By convetion static library
	file names are prefixed with
	<computeroutput>lib</computeroutput> and have the extension
	<computeroutput>.a</computeroutput>.  You then specify the
	library to the compiler with <option>-lname</option> where
	name is the filename of the library (you may need to provide
	an extra directory to search to the compiler with
	<option>-L</option>). XXX</para>

    <para>Below we show an example of creating a simple static
	library and linking it into an application.</para>

  </sect1>

  <sect1>

    <title>Dynamic Libraries</title>

    <para>We know that for the operating system code is considered
      read only, and separate from data.  It seems logical then that
      if programs can not modify code and have large amounts of common
      code, instead of replicating it for every executable it should
      be shared between many executables.</para>

    <para>With virtual memory this can be easily done.  The physical
      pages of memory the library code is loaded into can be easily
      referenced by any number of virtual pages in any number of
      address spaces.  So while you only have one physical copy of the
      library code in system memory, every process can have access to
      that library code at any virtual address it likes.</para>
    
    <para>Thus people quickly came up with the idea of a
      <emphasis>shared library</emphasis> which, as the name suggests,
      is shared by multiple exectuables.  Each exectuable contains a
      reference essentially saying "I need library foo".  When the
      program is loaded, it is up to the system to either check if
      some other program has already loaded the code for library foo
      into memory, and thus share it by mapping pages into the
      exeutable for that physical memory, or otherwise load the
      library into memory for the executable.</para>

  </sect1>

</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("../csbu.sgml" "book" "chapter")
End:
-->