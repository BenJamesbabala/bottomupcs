<chapter id="chapter00">
  
  <title>General Unix and Advanced C</title>

  <sect1 id="everything_is_a_file">
    <title><emphasis>Everything is a file!</emphasis></title>

    <para>If you learn nothing else, you should remember that in UNIX
    everything is a file.</para>

    <para>Imagine a file in the context something familiar like a word
    processor.  There are two fundamental operations we can use on
    this imaginary word processing file</para>

    <orderedlist>
      <listitem><para>Read it (existing saved data from the word processor).</para></listitem>
      <listitem><para>Write to it (new data from the user).</para></listitem>
    </orderedlist>

    <para>Now consider some of the common things attached to a
    computer and how they relate to our fundamental file
    operations.</para>

    <orderedlist>
      <listitem><para>The screen</para></listitem>
      <listitem><para>The keyboard</para></listitem>
      <listitem><para>A printer</para></listitem>
      <listitem><para>A CDROM</para></listitem>
    </orderedlist>

    <para>The screen and printer are both like a write-only file, but
    instead of being stored as bits on a disk the information is
    displayed as dots on a screen or lines on a page. The keyboard is
    like a read only file with the data coming from keystrokes and the
    CDROM is similar but rather than randomly coming from the user the
    data is stored directly on the disk.</para>

    <para>Thus a file is a good <emphasis>abstraction</emphasis> of
    all the devices attached to the computer.  Some files may be
    read-only, or write-only, or indeed both.</para>

  </sect1>

  <sect1 id="abstration">
    <title>Abstraction and function pointers</title>

    <para>To a programmer, reading data from the keyboard or the CDROM
    is essentially the same thing.  All the programmer cares about is
    that the bits of data come from <emphasis>somewhere</emphasis>.
    It is one of the fundamental roles of the operating system to
    provide this <emphasis>abstraction</emphasis> for the programmer.</para>

    <figure>
      <title>Abstraction</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="chapter00/figures/abstraction.eps" format="EPS" />
	</imageobject>
	<imageobject role="fo">
	  <imagedata fileref="chapter00/figures/abstraction.svg"
	  format="SVG" scalefit="1" width="100%" contentdept="100%" />
	</imageobject>
	<imageobject role="html">
	  <imagedata fileref="chapter00/figures/abstraction.png" format="PNG" />
	</imageobject>
	<textobject>
	  <phrase>Can you spot the difference between a CDROM and a keyboard?  As an application programmer, you should not be able to.</phrase>
	</textobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>Application Programming Interfaces</title>

      <para>Abstraction is implemented by an <emphasis>Application
    Programming Interface</emphasis>.  The programmer designs a set of
    functions and variables as the API which other programmers will
    use.  A common method used in the Linux Kernel is function
    pointers.</para>

      <example id="abstraction-code">
	<title>Abstraction with function pointers</title>
	<programlisting linenumbering="numbered" lang="C"><inlinemediaobject>
	    <imageobject>
	      <imagedata fileref="code/abstraction.c" format="linespecific"></imagedata>
	    </imageobject>
	  </inlinemediaobject></programlisting>
      </example>

      <para>Code such as the above is the simplest example of
    constructs used repeatedly through the Linux Kernel (and indeed
    many other projects).  Lets have a look at some specific
    elements.</para>

      <para>We start out with a structure that defines the API.  The
    functions whose names are encased in parenthesis with a pointer
    marker describe a <emphasis>function
    pointer</emphasis><footnote><para>Often you will see that the
    names of the parameters are omitted, and only the type of the
    parameter is specified.  This allows the implementer to specify
    their own parameter names avoiding warnings from the
    compiler.</para></footnote>.  The function pointer describes the
    prototype of function it must point to; pointing it at a function
    without the correct return type or parameters will generate a
    compiler warning, and will probably lead to incorrect operation or
    crashes.</para>

      <para>We then have our implementation of the API.  Often for
    more complex functionality you will see an idiom where API
    implementation functions will only be a wrapper around another
    function that is conventionally prepended with or or two
    underscores (i.e. <computeroutput>say_hello_fn()</computeroutput>
    would call another function
    <computeroutput>_say_hello_function()</computeroutput>).  This
    avoids "namespace pollution" and often enables significant changes
    in the internal workings whilst leaving the API constant.  Our
    implementation is very simple however, and doesn't even need it's
    own support functions.</para>

      <para>Second to last, we fill out the function pointers in
    <computeroutput>struct greet_api greet_api</computeroutput>.  The
    name of the function is a pointer, therefore there is no need to
    take the address of the function
    (i.e. <computeroutput>&amp;say_hello_fn</computeroutput>).</para>

      <para>Finally we can call the API functions through the
    structure in <computeroutput>main</computeroutput>.</para>
    </sect2>

    <sect2>
      <title>Libraries</title>

      <para>Libraries have two roles which illustrate
	abstraction.</para>

      <itemizedlist>
	<listitem>
	  <para>Allow programmers to reuse commonly accessed code.</para>
	</listitem>
	<listitem>
	  <para>Act as a <emphasis>black box</emphasis> implementing
	    functionality for the programmer.</para>
	</listitem>
      </itemizedlist>

      <para>For example, a library implementing access to the raw data
	in JPEG files has both the advantage that the many programs
	who wish to access image files can all use the same library
	and the programmers building these programs do not need to
	worry about the exact details of the JPEG file format, but can
	concentrate their efforts on what their program wants to do
	with the image.</para>

    </sect2>

    <sect2>
      <title>Summary</title>
      <para>The essential points to note are</para>

      <itemizedlist>
	<listitem>
	  <para>We are free to change the internal implementation at any
	time; say to write to a file rather than the screen.</para>
      </listitem>
      <listitem>
	<para>We can setup function pointers as handy ways to implement an API</para>
      </listitem>
    </itemizedlist>
    </sect2>

    <sect2>
      <title>Exercises</title>
      <itemizedlist>
	<listitem>
	  <para>Compile the above program with
	  <application>gcc</application> and run it.</para>
	</listitem>
	<listitem>
	  <para>Using the <computeroutput>%p</computeroutput>
	  specifier of <computeroutput>printf</computeroutput> find
	  the <emphasis>address</emphasis> of the
	  <computeroutput>say_hello_fn</computeroutput> function.
	  Compare this to the <emphasis>values</emphasis> of the same
	  function.  Are they the same?</para>
	</listitem>
	<listitem>
	  <para>Extend the API in some creative way by specifying a
	  new function in the <computeroutput>struct
	  greet_api</computeroutput> and implementing it.</para>
	</listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="file_descriptors">
    <title>Standard File Descriptors</title>
    <para>Every running program under Unix starts with three files already opened</para>
    <table>
      <title>Standard Files Provided by Unix</title>
      <tgroup cols="3">
	<thead>
	  <row>
	    <entry>Descriptive Name</entry>
	    <entry>File Number</entry>
	    <entry>Description</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>Standard In</entry>
	    <entry>0</entry>
	    <entry>Input from the keyboard</entry>
	  </row>
	  <row>
	    <entry>Standard Out</entry>
	    <entry>1</entry>
	    <entry>Output to the console</entry>
	  </row>
	  <row>
	    <entry>Standard Error</entry>
	    <entry>2</entry>
	    <entry>Error output to the console</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <para>So by default, all input will come from the keyboard and all
    output (both normal and error output) will go to the screen.</para>

    <figure>
      <title>Default Unix Files</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="chapter00/figures/stdfds.eps" format="EPS"></imagedata>
	</imageobject>
	<imageobject role="fo">
	  <imagedata fileref="chapter00/figures/stdfds.svg"
	  format="SVG" scalefit="1" width="100%"
	  contentdept="100%"></imagedata>
	</imageobject>
	<imageobject role="html">
	  <imagedata fileref="chapter00/figures/stdfds.png" format="PNG"></imagedata>
	</imageobject>
	<textobject>
	  <phrase>The standard files opened with any UNIX program.</phrase>
	</textobject>
      </mediaobject>
    </figure>

    <sect2>
      <title>The Shell</title> 
      
      <para>The shell is your gateway to interacting with the
      operating system.  It has only one major task -- to allow you to
      execute programs (you will begin to understand how the shell
      actually does this when we talk about some of the internals of
      the operating system later).</para>

      <para>But modern shells do much more than allow you to simply
      execute a program.  They have powerful abilities to redirect
      files, allow you to execute multiple programs simultaneously and
      script complete programs.</para>
      
    </sect2>

    <sect2>
      <title>Redirection</title> <para>Often we do not want the
      standard files mentioned above to point to their default places.
      For example, you may wish to capture all the output of a program
      into a file on disk, or, alternatively have it read its commands
      from a file you prepared earlier.  Another useful task might
      like to pass the output of one program to the input of another.
      It should come as no surprise you shell allows you to do all of
      this (and more!)</para>

    <table>
      <title>Standard Shell Redirection Facilities</title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>Name</entry>
	    <entry>Command</entry>
	    <entry>Description</entry>
	    <entry>Example</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>Redirect to a file</entry>
	    <entry><computeroutput>&gt; filename</computeroutput></entry>
	    <entry>Take all output from standard out and place it into
	    <computeroutput>filename</computeroutput>.  Note using
	    <computeroutput>&gt;&gt;</computeroutput> will append to
	    the file, rather than overwrite it.</entry>
	    <entry><computeroutput>ls &gt; filename</computeroutput></entry>
	  </row>
	  <row>
	    <entry>Read from a file</entry>
	    <entry>&lt; <computeroutput>filename</computeroutput></entry>
	    <entry>Copy all data from the file to the standard input of the program</entry>
	    <entry><computeroutput>echo &lt; filename</computeroutput></entry>
	  </row>
	  <row>
	    <entry>Pipe</entry>
	    <entry><computeroutput>program1 | program2</computeroutput></entry>
	    <entry>Take everything from standard out of
	    <computeroutput>program1</computeroutput> and pass it to
	    standard input of
	    <computeroutput>program2</computeroutput></entry>
	    <entry><computeroutput>ls | more</computeroutput></entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    </sect2>


  </sect1>

</chapter>

<!--
Local Variables:
mode: sgml
sgml-parent-document: ("../csbu.xml" "book" "chapter")
End:
-->